@model CategoryModel
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Core
@inject IWorkContext workContext
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl<Category>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}

@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <div class="section-width">
                <ul itemscope itemtype="http://schema.org/BreadcrumbList">
                    <li>
                        <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                        <span class="delimiter">@breadcrumbDelimiter</span>
                    </li>
                    @{
                        int position = 1;
                    }
                    @foreach (var cat in Model.CategoryBreadcrumb)
                    {
                        var isLastCategory = cat.Id == Model.Id;
                        <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                            @if (isLastCategory)
                            {
                                <strong class="current-item" itemprop="name">@cat.Name</strong>
                                <span itemprop="item" itemscope itemtype="http://schema.org/Thing" 
                                    id="@(Url.RouteUrl<Category>(new { SeName = cat.SeName }))">
                                </span>
                            }
                            else
                            {
                                <a href="@(Url.RouteUrl<Category>(new { SeName = cat.SeName }))" title="@cat.Name" itemprop="item">
                                    <span itemprop="name">@cat.Name</span>
                                </a>
                                <span class="delimiter">@breadcrumbDelimiter</span>
                            }
                            <meta itemprop="position" content="@position" />
                        </li>
                        position++;
                    }
                </ul>
            </div>
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
        </div>
    }
}


@section PxCategoryTitle{
    <div class="category-page-title">
        <h1>@Model.Name</h1>
    </div>
}


@section PxSubcategory
    {
    @*subcategories*@
    @if (Model.SubCategories.Count > 0)
    {
        <div class="category-grid sub-category-grid">
            <div class="item-grid px_subcategory">
                @foreach (var item in Model.SubCategories)
                {
                    <div class="item-box px_category">
                        <div class="sub-category-item">

                            <div class="picture">
                                <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                    <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    <div class="px_category_hover"></div>
                                </a>
                            </div>

                            <h2 class="title">
                                <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                    @item.Name
                                </a>
                            </h2>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}


@section PxCatalogFilter{
    @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
}


@section CatalogFilters {
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
}

<div class="page category-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
        @{
            var catalogProductsViewData = new ViewDataDictionary(ViewData);
            catalogProductsViewData["fetchUrl"] = Html.Raw(Url.Action("GetCategoryProducts", "Catalog", new { categoryId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })

        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid section-padding">
                <div class="title section-head">
                    <h2>@T("Products.FeaturedProducts")</h2>
                </div>
                <div class="item-grid px_category_product">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>


<script asp-location="Footer">
    $(".px_subcategory").slick({
        infinite: true,
        autoplay: false,
        dots: false,
        arrows: true,
        slidesToShow: 5,
        slidesToScroll: -1,
        rtl: @((await workContext.GetWorkingLanguageAsync()).Rtl.ToString().ToLower()),
        slidesToScroll: 1,
        responsive: [{
            breakpoint: 1381,
            settings: {
                slidesToShow: 3,
                slidesToScroll: -1,
                slidesToScroll: 1
            }
        },
        {
            breakpoint: 1199,
            settings: {
                slidesToShow: 3,
                slidesToScroll: -1,
                slidesToScroll: 1
            }
        },
        {
            breakpoint: 769,
            settings: {
                slidesToShow: 2,
                slidesToScroll: -1,
                slidesToScroll: 1
            }
        }, {
            breakpoint: 576,
            settings: {
                slidesToShow: 1,
                slidesToScroll: -1,
                slidesToScroll: 1
            }
        }]
    })
</script>