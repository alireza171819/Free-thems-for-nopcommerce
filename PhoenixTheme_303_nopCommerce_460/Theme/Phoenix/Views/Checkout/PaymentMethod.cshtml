@model CheckoutPaymentMethodModel
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-checkout-page");
    NopHtml.AppendPageCssClassParts("html-payment-method-page");
}
<div class="page checkout-page payment-method-page section-width">
    @await Component.InvokeAsync(typeof(CheckoutProgressViewComponent), new { step = CheckoutProgressStep.Payment })
    <div class="section-head">
        <h1>@T("Checkout.SelectPaymentMethod")</h1>
    </div>
    <div class="page-body checkout-data">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutPaymentMethodTop, additionalData = Model })
        <div class="section payment-method">
            <form asp-route="CheckoutPaymentMethod" method="post">
                @if (Model.DisplayRewardPoints && Model.PaymentMethods.Count > 0)
                {
                <div class="use-reward-points">
                    <label class="checkbox path" asp-for="UseRewardPoints">
                        <input type="checkbox" asp-for="UseRewardPoints" />
                        <svg viewBox="0 0 21 21">
                            <path d="M5,10.75 L8.5,14.25 L19.4,2.3 C18.8333333,1.43333333 18.0333333,1 17,1 L4,1 C2.35,1 1,2.35 1,4 L1,17 C1,18.65 2.35,20 4,20 L17,20 C18.65,20 20,18.65 20,17 L20,7.99769186"></path>
                        </svg>
                        @string.Format(T("Checkout.UseRewardPoints").Text, Model.RewardPointsToUse, Model.RewardPointsBalance, Model.RewardPointsToUseAmount)
                    </label>
                    @if (Model.RewardPointsEnoughToPayForOrder)
                    {
                        <script asp-location="Footer">
                                $(document).ready(function() {
                                    $("#@Html.IdFor(model => model.UseRewardPoints)")
                                        .on('change', toggleUseRewardPoints);
                                    toggleUseRewardPoints();
                                });

                                function toggleUseRewardPoints() {
                                    if ($('#@Html.IdFor(model => model.UseRewardPoints)').is(':checked')) {
                                        $('#payment-method-block').hide();
                                    } else {
                                        $('#payment-method-block').show();
                                    }
                                }
                        </script>
                    }
                </div>
                }
                @if (Model.PaymentMethods.Count > 0)
                {
                    <ul class="method-list" id="payment-method-block">
                        @for (var i = 0; i < Model.PaymentMethods.Count; i++)
                        {
                            var paymentMethod = Model.PaymentMethods[i];
                            var paymentMethodName = paymentMethod.Name;
                            if (!string.IsNullOrEmpty(paymentMethod.Fee))
                            {
                                paymentMethodName = T("Checkout.SelectPaymentMethod.MethodAndFee", paymentMethodName, paymentMethod.Fee).Text;
                            }
                            <li>
                                <div class="method-name">
                                    @if (!string.IsNullOrEmpty(paymentMethod.LogoUrl))
                                    {
                                        <div class="payment-logo">
                                            <label for="paymentmethod_@(i)">
                                                <img src="@paymentMethod.LogoUrl" alt="@paymentMethodName" />
                                            </label>
                                        </div>
                                    }
                                <div class="payment-details">
                                    <label for="paymentmethod_@(i)">
                                        <input id="paymentmethod_@(i)" type="radio" name="paymentmethod" value="@(paymentMethod.PaymentMethodSystemName)" checked="@paymentMethod.Selected" />
                                        <div class="circle">
                                            <div class="circle--inner circle--inner__1"></div>
                                            <div class="circle--inner circle--inner__2"></div>
                                            <div class="circle--inner circle--inner__3"></div>
                                            <div class="circle--inner circle--inner__4"></div>
                                            <div class="circle--inner circle--inner__5"></div>
                                            <div class="circle--outer"></div>
                                        </div>
                                        @paymentMethodName
                                    </label>
                                    @if (!string.IsNullOrEmpty(paymentMethod.Description))
                                    {
                                        <div class="payment-description">@paymentMethod.Description</div>
                                    }
                                </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <div class="buttons">
                        <button type="submit" name="nextstep" class="button-1 checkout-button payment-method-next-step-button primary-btn">@T("Checkout.NextButton")</button>
                    </div>
                }
                else
                {
                    <div class="message-error">
                        @T("Checkout.NoPaymentMethods")
                    </div>
                }
            </form>
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutPaymentMethodBottom, additionalData = Model })
        <div class="section order-summary">
            <div class="section-head">
                <h2>@T("Checkout.OrderSummary")</h2>
            </div>
            @await Component.InvokeAsync(typeof(OrderSummaryViewComponent))
        </div>
    </div>
</div>