@model CheckoutShippingMethodModel
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-checkout-page");
    NopHtml.AppendPageCssClassParts("html-shipping-method-page");
}
<div class="page checkout-page shipping-method-page section-width">
    @await Component.InvokeAsync(typeof(CheckoutProgressViewComponent), new { step = CheckoutProgressStep.Shipping })
    <div class="section-head">
        <h1>@T("Checkout.SelectShippingMethod")</h1>
    </div>
    <div class="page-body checkout-data">
        <div class="section shipping-method">
            <form asp-route="CheckoutShippingMethod" method="post">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutShippingMethodTop, additionalData = Model })

                @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
                {
                    @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $(document).on('checkout_toggle_pickup_in_store', function (e) {
                                if (e.checked)
                                    $('.method-list').hide();
                                else
                                    $('.method-list').show();
                            });
                        });
                    </script>
                }

                @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
                {
                    @if (Model.Warnings.Count == 0)
                    {
                        <ul class="method-list">
                            @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                            {
                                var shippingMethod = Model.ShippingMethods[i];
                                <li>
                                    <div class="px_shipping_method_list">
                                        <div class="method-name">
                                            <label for="shippingoption_@(i)" class="forcheckbox">
                                                <input id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected"  />
                                                <div class="circle">
                                                    <div class="circle--inner circle--inner__1"></div>
                                                    <div class="circle--inner circle--inner__2"></div>
                                                    <div class="circle--inner circle--inner__3"></div>
                                                    <div class="circle--inner circle--inner__4"></div>
                                                    <div class="circle--inner circle--inner__5"></div>
                                                    <div class="circle--outer"></div>
                                                </div>
                                                @T("Checkout.SelectShippingMethod.MethodAndFee", shippingMethod.Name, shippingMethod.Fee)
                                            </label>
                                        </div>
                                        @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                        {
                                            <div class="method-description">
                                                @Html.Raw(shippingMethod.Description)
                                            </div>
                                        }
                                    </div>                                    
                                </li>
                            }
                        </ul>
                        if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                        {
                            <div class="multiple-locations">
                                @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                            </div>
                        }
                        <div class="buttons">
                            <button type="submit" name="nextstep" class="button-1 checkout-button shipping-method-next-step-button primary-btn">@T("Checkout.NextButton")</button>
                        </div>
                    }
                    else
                    {
                        <div class="message-error">
                            <ul>
                                @foreach (var warning in Model.Warnings)
                                {
                                    <li>@warning</li>
                                }
                            </ul>
                        </div>
                    }
                }

                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutShippingMethodBottom, additionalData = Model })
            </form>
        </div>
        <div class="section order-summary">
            <div class="section-head">
                <h2>@T("Checkout.OrderSummary")</h2>
            </div>
            @await Component.InvokeAsync(typeof(OrderSummaryViewComponent))
        </div>
    </div>
</div>
