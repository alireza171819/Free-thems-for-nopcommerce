@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper

<div class="header-links">
    <ul>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        @if (Model.IsAuthenticated)
            {
            <li>
                <ul class="nav-content-list">
                    <li class="nav-content-item account-login">
                        <span class="pi-user-6"></span>
                        <h4 class="login-text">
                            <div class="account-option">
                                @T("Theme.Phoenix.Hello")<strong>@Model.CustomerName</strong>
                            </div>
                        </h4>
                        <ul class="login-list">                      
                            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account login-list-item">@T("Account.MyAccount")</a></li>
                            <li><a href="@Url.RouteUrl("Logout")" class="ico-logout login-list-item">@T("Account.Logout")</a></li>
                        </ul>
                    </li>

                </ul>
            </li>
            }
        else
            {
                    var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                        ? url.ToString()
                        : webHelper.GetRawUrl(Context.Request);

                @if (Model.RegistrationType != UserRegistrationType.Disabled)
                {
                    <li>

                         <ul class="nav-content-list">
                             <li class="nav-content-item account-login">
                                 <span class="pi-user-6"></span>
                                 <h4 class="login-text">
                                     <div class="account-option">
                                         @T("Theme.Phoenix.Hello"), <strong>@T("Theme.Phoenix.Create.Account")</strong>
                                     </div>
                                 </h4>
                                 <ul class="login-list">
                                     <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register login-list-item">@T("Account.Register")</a></li>
                                     <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login login-list-item">@T("Account.Login")</a>                                </li>
                                 </ul>
                             </li>
                          </ul>
                    </li>
                    
                }
            }
        @if (Model.AllowPrivateMessages)
        {
            string totalMessageText = !string.IsNullOrWhiteSpace(Model.UnreadPrivateMessages) ? Model.UnreadPrivateMessages : "0";
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="pi-mail-2">
                    
                    <span class="inbox-unread px-unread-qty">@totalMessageText</span>
                </a>
            </li>
         }
        @if (Model.WishlistEnabled)
         {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="pi-heart">
                    <span class="wishlist-qty px-unread-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
          }
        @if (Model.ShoppingCartEnabled)
          {
            <li id="topcartlink" class="px-cart-desktop">
                <a href="javascript:void(0)" class="pi-px-shopping-cart">
                    <span class="cart-qty px-unread-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
         }
        @if (Model.ShoppingCartEnabled)
          {
            <li id="topcartlink" class="px-cart-mobile">
                <a href="@Url.RouteUrl("ShoppingCart")" class="pi-px-shopping-cart">
                    <span class="cart-qty px-unread-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
         }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
    //new private message notification
        <script asp-location="Footer">
        $(document).ready(function () {
            displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
        });
        </script>
    }
</div>
