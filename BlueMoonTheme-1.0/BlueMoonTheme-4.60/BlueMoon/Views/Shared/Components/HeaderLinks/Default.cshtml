@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper

<div class="header-links">
    <ul>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist" title="Wishlist">
                    <span class="wishlist-label"><i class="fas fa-heart"></i></span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart" title="Shopping cart">
                    <span class="cart-label"><i class="fas fa-shopping-cart" style="font-size: 15px; color: #759fff!important;"> </i></span>
                    <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
        }
       
       @if (Model.IsAuthenticated)
            {
                <li>
                    <a href="@Url.RouteUrl("CustomerInfo")" data-toggle="tooltip" data-placement="top" title="@T("Account.MyAccount")">
                        <span class="cart-label"><i class='fas fa-user-alt'></i></span>
                    </a>
                </li>
                <li>
                    <a href="@Url.RouteUrl("Logout")" data-toggle="tooltip" data-placement="top" title="@T("Account.Logout")">
                        <span class="wishlist-label"><i class='fas fa-sign-out-alt'></i></span>
                    </a>
                </li>
                
            }
            else
            {
                var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url) ? url.ToString() : webHelper.GetRawUrl(Context.Request);


                <li class="">
                    <div class="User-module">
                        <span class="cart-label"><i class='fas fa-user-alt' style="font-size: 15px; color: #759fff!important;"></i></span>
                        <div class="User-module-content">
                            <p>
                                <a href="@Url.RouteUrl("Register", new { returnUrl })">
                                    <div class="">
                                        @T("Account.Register")
                                    </div>
                                </a>
                            </p>
                            @if (Model.RegistrationType != UserRegistrationType.Disabled)
                            {
                                <p>
                                    <a href="@Url.RouteUrl("Login", new { returnUrl })">
                                        <div class="">
                                            @T("Account.Login")
                                        </div>
                                    </a>
                                </p>
                            }
                        </div>
                    </div>

                </li>

            }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>