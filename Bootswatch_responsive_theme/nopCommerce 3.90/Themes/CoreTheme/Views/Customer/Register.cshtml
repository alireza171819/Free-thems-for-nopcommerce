@model RegisterModel
@using Nop.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
    //page class
    Html.AppendPageCssClassParts("html-registration-page");
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
             var selectedItem = $(this).val();
             var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
     });
    </script>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="page registration-page from-panel">
        <div class="page-title panel-heading">
            <h1>@T("Account.Register")</h1>
        </div>
        <div class="page-body form-horizontal panel-body">
            @{
                var validationSummary = Html.ValidationSummary(true);
            }
            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="message-error">@validationSummary</div>
            }
            @Html.Partial("_ExternalAuthentication.AssociateMessage")
            <div class="fieldset">
                <div id="legend">
                    <legend>@T("Account.YourPersonalDetails")</legend>
                </div>
                @if (Model.GenderEnabled)
                {
                    <div class="form-group">
                        <label class="control-label col-sm-3 col-md-4 col-xs-3">@T("Account.Fields.Gender")</label>
                        <div class="col-sm-6 col-md-4 col-xs-9">
                            <label class="radio-inline">
                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })<span class="forcheckbox">@T("Account.Fields.Gender.Male")</span>
                            </label>
                            <label class="radio-inline">
                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })<span class="forcheckbox">@T("Account.Fields.Gender.Female")</span>
                            </label>
                        </div>
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                    <div class="col-sm-6 col-md-4 col-xs-12">
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                    </div>
                    <div class="col-sm-3 col-md-4 col-xs-12">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                    <div class="col-sm-6 col-md-4 col-xs-12">
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                    </div>
                    <div class="col-sm-3 col-md-4 col-xs-12">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                </div>
                @if (Model.DateOfBirthEnabled)
                {  
                    <div class="form-group">
                        <div class="control-group date-of-birth">
                            <label class="control-label col-sm-3 col-md-4 col-xs-12">@T("Account.Fields.DateOfBirth")</label>
                            <div class="col-sm-5 col-md-4 col-xs-12 date-birth-text">
                                @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                            Html.FieldNameFor(x => x.DateOfBirthMonth),
                            Html.FieldNameFor(x => x.DateOfBirthYear),
                            DateTime.Now.Year - 110,
                            DateTime.Now.Year,
                            Model.DateOfBirthDay,
                            Model.DateOfBirthMonth,
                            Model.DateOfBirthYear)
                                @if (Model.DateOfBirthRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                                @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                                @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                            </div>
                    </div>
                </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                    <div class="col-sm-6 col-md-4 col-xs-12">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                    </div>
                    <div class="col-sm-3 col-md-4 col-xs-12">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>
                @if (Model.EnteringEmailTwice)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmEmail, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                        <div class="col-sm-6 col-md-4 col-xs-12">
                            @Html.TextBoxFor(model => model.ConfirmEmail, new { @class = "form-control" })
                        </div>
                        <div class="col-sm-3 col-md-4 col-xs-12">
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.ConfirmEmail)
                        </div>
                    </div>
                }
                @if (Model.UsernamesEnabled)
                {
                    <div class="form-group row">
                        @Html.LabelFor(model => model.Username, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                        <div class="col-sm-6 col-md-4 col-xs-12">
                            @Html.TextBoxFor(model => model.Username, new { @class = "form-control " })
                        </div>
                        <div class="col-sm-3 col-md-4 col-xs-12 check-availability">
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Username)
                            @if (Model.CheckUsernameAvailabilityEnabled)
                            {
                                @Html.Partial("_CheckUsernameAvailability")
                            }
                        </div>
                    </div>
                }
            </div>

            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <div class="fieldset">
                    <div id="legend"><legend>@T("Account.CompanyDetails")</legend></div>
                        @if (Model.CompanyEnabled)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Company, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                                <div class="col-sm-6 col-md-4 col-xs-12">
                                    @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-3 col-md-4 col-xs-12">
                                    @if (Model.CompanyRequired)
                                    {
                                        @Html.RequiredHint()
                                    }
                                    @Html.ValidationMessageFor(model => model.Company)
                                </div>
                            </div>
                        }
                        @if (Model.DisplayVatNumber)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.VatNumber, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                                <div class="col-sm-6 col-md-4 col-xs-12">
                                    @Html.TextBoxFor(model => model.VatNumber, new { @class = "form-control" })@*;@Model.VatNumberStatusNote*@
                                    <span class="help-block"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                                </div>
                            </div>
                        }
                    </div>
            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
            || Model.CityEnabled || Model.CountryEnabled)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend>@T("Account.YourAddress")</legend>
                    </div>
                        @if (Model.StreetAddressEnabled)
                        {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.StreetAddress, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                            <div class="col-sm-6 col-md-4 col-xs-12">
                                @Html.TextBoxFor(model => model.StreetAddress, new { @class = "form-control" })
                            </div>
                            <div class="col-sm-3 col-md-4 col-xs-12">
                                @if (Model.StreetAddressRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StreetAddress)
                            </div>

                        </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.StreetAddress2, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                            <div class="col-sm-6 col-md-4 col-xs-12">
                                @Html.TextBoxFor(model => model.StreetAddress2, new { @class = "form-control" })
                            </div>
                            <div class="col-sm-3 col-md-4 col-xs-12">
                                @if (Model.StreetAddress2Required)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StreetAddress2)
                            </div>

                        </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.ZipPostalCode, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                            <div class="col-sm-6 col-md-4 col-xs-12">
                                @Html.TextBoxFor(model => model.ZipPostalCode, new { @class = "form-control" })
                            </div>
                            <div class="col-sm-3 col-md-4 col-xs-12">
                                @if (Model.ZipPostalCodeRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.ZipPostalCode)
                            </div>

                        </div>
                        }
                        @if (Model.CityEnabled)
                        {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.City, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                            <div class="col-sm-6 col-md-4 col-xs-12">
                                @Html.TextBoxFor(model => model.City, new { @class = "form-control" })
                            </div>
                            <div class="col-sm-3 col-md-4 col-xs-12">
                                @if (Model.CityRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.City)
                            </div>

                        </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.CountryId, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                            <div class="col-sm-6 col-md-4 col-xs-12">
                                @Html.DropDownList("CountryId", Model.AvailableCountries, new { @class = "form-control" })
                            </div>
                            <div class="col-sm-3 col-md-4 col-xs-12">
                                @if (Model.CountryRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.CountryId)
                            </div>
                        </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.StateProvinceId, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                            <div class="col-sm-6 col-md-4 col-xs-12">
                                @Html.DropDownList("StateProvinceId", Model.AvailableStates, new { @class = "form-control" })
                                <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                            <div class="col-sm-3 col-md-4 col-xs-12">
                                @if (Model.StateProvinceRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StateProvinceId)
                                <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                        </div>
                        }             
                </div>
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend>@T("Account.YourContactInformation")</legend>
                    </div>
                        @if (Model.PhoneEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Phone, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                                <div class="col-sm-6 col-md-4 col-xs-12">
                                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-3 col-md-4 col-xs-12">
                                    @if (Model.PhoneRequired)
                                    {
                                        @Html.RequiredHint()
                                    }
                                    @Html.ValidationMessageFor(model => model.Phone)
                                </div>
                            </div>
                        }
                        @if (Model.FaxEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Fax, new { @class = "control-label col-sm-3 col-md-4 col-xs-12" })
                                <div class="col-sm-6 col-md-4 col-xs-12">
                                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-3 col-md-4 col-xs-12">
                                    @if (Model.FaxRequired)
                                    {
                                        @Html.RequiredHint()
                                    }
                                    @Html.ValidationMessageFor(model => model.Fax)
                                </div>

                            </div>
                        }
                </div>
            }
            @if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
            {
                <div class="fieldset">
                    <div id="legend"><legend>@T("Account.Options")</legend></div>
			        @if (Model.NewsletterEnabled)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Newsletter, new { @class = "col-sm-3 col-md-4 col-xs-3  news-letter control-label" })
                            <div class="col-sm-6 col-md-4 col-xs-3">
                                @Html.EditorFor(model => model.Newsletter, new { })
                            </div>
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
			        }
			        @if (Model.CustomerAttributes.Count > 0)
                    {
                        @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                    }  
                  </div>
            }
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend>@T("Account.Preferences")</legend>
                    </div>
                    <div class="form-group">
                        @if (Model.AllowCustomersToSetTimeZone)
                        {
                            @Html.LabelFor(model => model.TimeZoneId, new { @class = "col-sm-3 col-md-4 col-xs-12 control-label" })
                    <div class="col-sm-6 col-md-4 col-xs-12">
                        @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones, new { @class = "form-control dropdown-toggle category-iteam category-select" })
                        @Html.ValidationMessageFor(model => model.TimeZoneId)
                    </div>
                        }
                    </div>
                </div>
            }
            <div class="fieldset">
                <div id="legend">
                    <legend>@T("Account.YourPassword")</legend>
                </div>
                <div class="form-fields">
                    <div class="form-group row">
                        @Html.LabelFor(model => model.Password, new { @class = "col-sm-3 col-md-4 col-xs-12 control-label" })
                        <div class="col-sm-6 col-md-4 col-xs-12">
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", Type = "password" })
                        </div>
                        <div class="col-sm-3 col-md-4 col-xs-12">
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Password)
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-sm-3 col-md-4 col-xs-12 control-label" })
                        <div class="col-sm-6 col-md-4 col-xs-12">
                            @Html.TextBoxFor(model => model.ConfirmPassword, new { @class = "form-control", Type = "password" })
                        </div>
                        <div class="col-sm-3 col-md-4 col-xs-12">
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.ConfirmPassword)
                        </div>
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box row">
                            <div class="col-sm-offset-3 col-md-offset-4 col-md-4 col-xs-8">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        </div>
		            }
		            @if (Model.HoneypotEnabled)
                    {
                        @Html.Raw(Html.GenerateHoneypotInput())
                    } 
                </div>
            </div>
            @if (Model.AcceptPrivacyPolicyEnabled)
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#register-button').click(function () {
                            if ($('#accept-privacy-policy').is(':checked')) {
                                //do some stuff
                                return true;
                            }
                            else {
                                //just show validation errors, dont post
                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                return false;
                            }
                        });
                    });
                </script>
                <div class="form-group">
                    <div class="col-sm-offset-3 col-md-offset-4 col-md-8 col-xs-8">
                        <div class="accept-privacy-policy">
                            <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                            <label for="accept-privacy-policy">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                            <span class="read" id="read-privacyinfo">@T("Account.Fields.AcceptPrivacyPolicy.Read")</span>
                            <script>
                                $(document).ready(function() {
                                    $('#read-privacyinfo').on('click', function (e) {
                                        displayPopupContentFromUrl('@Url.RouteUrl("TopicPopup", new { SystemName = "privacyinfo" })', '@T("Account.Fields.AcceptPrivacyPolicy")');
                                    });
                                });
                            </script>
                        </div>
                    </div>
               </div>
            }
            <div class="form-group">
                <div class="col-sm-offset-3 col-md-offset-4 col-md-8 col-xs-8">
                    <input type="submit" id="register-button" class="btn btn-primary register-next-step-button" value="@T("Account.Register.Button")" name="register-button" />
                </div>
            </div>
            <div class="external-authentication">
                @Html.Action("ExternalMethods", "ExternalAuthentication")
            </div>
        </div>
    </div>
}

