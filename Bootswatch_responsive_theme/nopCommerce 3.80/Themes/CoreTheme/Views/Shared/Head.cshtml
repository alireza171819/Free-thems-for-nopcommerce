@using Nop.Core;
@using Nop.Core.Domain
@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.Themes
@using Nop.Web.Framework.UI
@using Nop.Core.Plugins
@using Nop.Services.Configuration
@{
    var supportRtl = EngineContext.Current.Resolve<IWorkContext>().WorkingLanguage.Rtl;
    var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;

    var _pluginFinder = EngineContext.Current.Resolve<IPluginFinder>();
    bool isBswatchEnable = false;
    string swatchColor = "";
    string customCSS = "";

    //find Plugin
    PluginDescriptor bootswatchPlugin = _pluginFinder.GetPluginDescriptorBySystemName("Nop.Plugin.XcellenceIt.BootswatchTheme");

    //check plugin is installed or not
    if (bootswatchPlugin != null)
    {
        if (bootswatchPlugin.Installed)
        {
            var storeId = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.Id;
            Boolean.TryParse(EngineContext.Current.Resolve<ISettingService>().GetSettingByKey("bootswatchthemesetting.bootswatchthemeenabled", String.Empty, storeId, true), out isBswatchEnable);
            if (isBswatchEnable)
            {
                swatchColor = EngineContext.Current.Resolve<ISettingService>().GetSettingByKey("bootswatchthemesetting.colorswatch", String.Empty, storeId, true);
                customCSS = EngineContext.Current.Resolve<ISettingService>().GetSettingByKey("bootswatchthemesetting.customcss", String.Empty, storeId, true);
            }
        }
    }

    //we do not support responsive for RTL yet
    //if (supportRtl)
    //{
    //    supportResponsive = false;
    //}
    //add browser specific CSS files
    var browser = Request.Browser;
    var isIeEightOrLess = false;
    if (browser.Browser == "IE" && browser.MajorVersion <= 8)
    {
        isIeEightOrLess = true;
    }

    //add main CSS file
    if (supportRtl)
    {
        //RTL is not supported by Core Theme
        //Html.AppendCssFileParts("~/Themes/CoreTheme/Content/styles.rtl.css");
    }
    else
    {
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        if (!string.IsNullOrWhiteSpace(customCSS))
        {
            <style type="text/css">
            @Html.Raw(customCSS)
            </style>
        }
        if (!string.IsNullOrWhiteSpace(swatchColor))
        {
            Html.AppendCssFileParts(string.Format("~/Plugins/XcellenceIt.BootswatchTheme/Content/css/{0}.custom.css", swatchColor.ToLower()));
        }
        Html.AppendCssFileParts(string.Format("~/Themes/CoreTheme/Content/css/theme-styles-responsive.css", themeName));
        Html.AppendCssFileParts(string.Format("~/Themes/CoreTheme/Content/css/theme-styles.css", themeName));
        Html.AppendCssFileParts(string.Format("~/Themes/CoreTheme/Content/css/font-awesome.min.css", themeName));
        if (swatchColor == "Default")
        {
            Html.AppendCssFileParts(string.Format("~/Themes/CoreTheme/Content/css/bootstrap.min.css", themeName));
        }
        else if (!string.IsNullOrWhiteSpace(swatchColor))
        {
            Html.AppendCssFileParts(string.Format("~/Plugins/XcellenceIt.BootswatchTheme/Content/css/{0}.min.css", swatchColor.ToLower()));
        }
        else
        {
            Html.AppendCssFileParts(string.Format("~/Themes/CoreTheme/Content/css/bootstrap.min.css", themeName));
        }
    }
    if (isIeEightOrLess)
    {
        Html.AddScriptParts("~/Themes/CoreTheme/Content/js/selectivizr.min.js");
        Html.AddScriptParts("~/Themes/CoreTheme/Content/js/respond.min.js");
    }
}